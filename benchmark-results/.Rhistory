# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(list(sample[2], sample[3]) )
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes[1][1][1])
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(sample[3])
}
analyse <- function(measurements) {
for(measurement in measurements) {
latency = unlist(strsplit(measurement, ",", fixed = TRUE))[3]
print(latency)
}
mes = lapply(measurements, split_measurement)
print(mes)
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
analyse <- function(measurements) {
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(sample[3])
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes[1])
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(sample[3])
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes[[1]])
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(sample[3])
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes)
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(sample[3])
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes)
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
unlist(strsplit("a.b.c", ".", fixed = TRUE))[3]
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(sample[3])
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes)
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(sample[3])
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes[1])
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(sample[3])
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes[1])
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(sample[2])
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes[1])
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
return(sample[2])
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes)
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
print(measurement)
return(sample[2])
}
analyse <- function(measurements) {
mes = lapply(measurements, split_measurement)
print(mes)
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
sample = unlist(strsplit(measurement, ",", fixed = TRUE))
print(measurement)
return(sample[2])
}
analyse <- function(measurements) {
print ('test')
mes = lapply(measurements, split_measurement)
print(mes)
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
analyse(measurements)
q
;
""
"´"
''
