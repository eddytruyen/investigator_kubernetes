for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
test = analyse(measurements)
test
# Analyse the measurement for a specific type (e.g. read) for a specific workload (e.g. A)
split_measurement <- function(measurement) {
measurement = unlist(strsplit(measurement, ",", fixed = TRUE))
sample <- as.numeric(measurement[3])
return(sample)
}
analyse <- function(measurements) {
latencies = c()
for(measurement in measurements) {
measurement = split_measurement(measurement)
latencies <- c(latencies, measurement)
}
return (latencies)
}
# Scans all files in a directory, if it matches the workload name
# we fetch the measurements and aggregate them.
get_workload_data <- function(workloadName) {
data.names <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
data <- vector("list", length(workloads.names))
names(data) <- data.names
for(file in files) {
# If not correct workload file, skip
if(!grepl(workload, file)) {
next
}
fileName = paste(dir, "/", file, sep="")
measurements = get_slices(fileName)
# Copy the measurement for each type into the general workload data set, separated into read, insert etc..
for(measurement in names(measurements)) {
# Might want to insert analyse here.
# Not the entire data set
analyse(measurements[[measurement]])
data[[measurement]] <- c(data[[measurement]], list(measurements[[measurement]]))
}
}
print(data$read)
}
measurements <- c( "READ,1464009691013,79" ,   "READ,1464009691013,79",    "READ,1464009691014,83"  ,  "READ,1464009691014,84"
,"READ,1464009691014,82"   , "READ,1464009691015,85"   , "READ,1464009691015,85"  ,  "READ,1464009691015,126"
,"READ,1464009691016,128" )
test = analyse(measurements)
test
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
workloads$workload = get_workload_data(workload)
}
}
setwd("~/Documents/kubernetes/kubernetes_on_openstack/benchmark-results")
# Gets the name of a measurement (e.g. read)
get_name <- function(line) {
line = tolower(line)
operations <- c("read", "insert", "update", "scan", "cleanup", "read-modify-write")
for (op in operations) {
if(grepl(op, line))  return (op)
}
return ("unknown")
}
# Get slices of READ, UPDATE, etc. measurements with timestamp(ms) and latency(us)
get_slices <- function(filename) {
df2 <- readLines(filename)
# Determine positions of raw measurements, start and end
positions = grep(pattern= "latency raw data", df2)
end_pos = grep(pattern= "\\[OVERALL\\], RunTime\\(ms\\)", df2)
# End position is the location of Overall runtime
positions[[length(positions)+1]] <- end_pos
i = 1
intervals <- length(positions)
slices = list()
slices.names = c()
# Get correct slices of measurements
while(i < intervals) {
slice=df2[(positions[i]+1):(positions[i+1]-1)];
name = get_name(slice[1]);
slices.names <- c(slices.names, name);
slices <- c(slices, list(slice));
i=i+1;
}
names(slices) <- slices.names
return (slices)
}
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
workloads$workload = get_workload_data(workload)
}
}
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
workloads$workload = get_workload_data(workload)
}
}
workloads
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
workloads[[workload]] = get_workload_data(workload)
}
}
workloads
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
workloads[[workload]] = get_workload_data(workload)
}
}
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
workloads[[workload]] = get_workload_data(workload)
}
}
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
workloads[[workload]] = get_workload_data(workload)
}
}
workloads$workloada
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
data = get_workload_data(workload)
print(data)
workloads[[workload]] = data
}
}
workloads
len(workloads)
names(workloads)
workloads$workloada
workloads$workloadb
workloads$workloadc
workloads$workloadd
workloads$workloade
workloads[["workloada"]]
workloads[["workloadb"]]
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
data = get_workload_data(workload)
print(data)
workloads[[workload]] <- data
}
}
workloads
workloads$workloada
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
data = get_workload_data(workload)
print(data)
print(workload)
workloads[[workload]] <- data
}
}
workloads$workloadc
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
data = get_workload_data(workload)
#print(data)
print(workload)
workloads[[workload]] <- data
}
}
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
# For each deployment, for each workload get all the measurements and aggregate.
dir = 'raw-results/localhost/'
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
data = get_workload_data(workload)
#print(data)
print(workload)
workloads[[workload]] <- data
}
workloads
workloads$workloada
directories
list(directories)
directories
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
deployments <- vector("list", length(directories))
names(deployments) <- directories
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
data = get_workload_data(workload)
#print(data)
print(workload)
workloads[[workload]] <- data
}
deployments[[dir]] <- workloads
}
deployments
deployments[1]
deployments[2]
deployments$`./raw-results/localhost`
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
deployments <- vector("list", length(directories))
names(deployments) <- directories
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
data = get_workload_data(workload)
workloads[[workload]] <- data
}
deployments[[dir]] <- workloads
}
deployments[1]
deployments$`./raw-results/localhost`
deployments$`./raw-results/localhost`$workloada
summary(deployments$`./raw-results/localhost`$workloada)
summary(deployments$`./raw-results/localhost`$workloada)
summary(deployments$`./raw-results/localhost`$workloada$read)
(deployments$`./raw-results/localhost`$workloada$read
(deployments$`./raw-results/localhost`$workloada$read
;q
deployments$`./raw-results/localhost`$workloada$read
deployments$`./raw-results/localhost`$workloada$read
summary(deployments$`./raw-results/localhost`$workloada$read)
summary(deployments$`./raw-results/localhost`$workloada$read[1])
summary(deployments$`./raw-results/localhost`$workloada$read[12)
summary(deployments$`./raw-results/localhost`$workloada$read[2])
describe(deployments$`./raw-results/localhost`$workloada$read[2])
median(deployments$`./raw-results/localhost`$workloada$read[2])
sapply(deployments$`./raw-results/localhost`$workloada$read[2], mean, na.rm=TRUE)
sapply(deployments$`./raw-results/localhost`$workloada$read[2], median, na.rm=TRUE)
plot(deployments$`./raw-results/localhost`$workloada$read[2])
histogram(deployments$`./raw-results/localhost`$workloada$read[2])
hist(deployments$`./raw-results/localhost`$workloada$read[2])
deployments$`./raw-results/localhost`$workloada$read[2]
unlist(deployments$`./raw-results/localhost`$workloada$read[2])
unlist(deployments$`./raw-results/localhost`$workloada$read[2][:500])
unlist(deployments$`./raw-results/localhost`$workloada$read[2][1:500])
unlist(deployments$`./raw-results/localhost`$workloada$read[2])[1:500]
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ymax=100)
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), y=100)
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=100)
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(1$10))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(10))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(100))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(200))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(500))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(1,500))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(1,500))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(1,500,10))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(1,500,40))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(200$10))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(200,10))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(1,200,10))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), xlim=range(1,200), breaks=10)
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=100)
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=100, xlim=200)
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=100, xlim=range(200))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=10, xlim=range(200))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=1, xlim=range(200))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=4, xlim=range(200))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=30, xlim=range(200))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=40, xlim=range(200))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=40, xlim=range(300))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=40, xlim=range(50,120))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=40, xlim=range(100,320))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=40, xlim=range(100,420))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=40, xlim=range(100,520))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=100, xlim=range(100,820))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=100, xlim=range(100,520))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=50, xlim=range(100,520))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=30, xlim=range(100,520))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=10, xlim=range(100,520))
hist(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), breaks=12, xlim=range(100,520))
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]))
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ymax=400)
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ymax=500)
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=500)
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(500)
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(500))
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(500))
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(1,500))
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(1,300))
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(1,200))
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(1,400))
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(1,600))
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(1,700))
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(1,600))
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
deployments <- vector("list", length(directories))
names(deployments) <- directories
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
data = get_workload_data(workload)
workloads[[workload]] <- data
}
deployments[[dir]] <- workloads
}
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(1,600))
rm(list=ls())
source(file="get_slices.r")
source(file="get_workload_data.r")
# Deployments
directories = list.dirs(path = "./raw-results", full.names = TRUE, recursive = FALSE)
# Workload type data
workloads.names <- c("workloada", "workloadb", "workloadc", "workloadd", "workloade", "workloadf")
workloads <- vector("list", length(workloads.names))
names(workloads) <- workloads.names
deployments <- vector("list", length(directories))
names(deployments) <- directories
# For each deployment, for each workload get all the measurements and aggregate.
for(dir in directories) {
files = list.files(path = dir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for(workload in workloads.names) {
data = get_workload_data(workload)
workloads[[workload]] <- data
}
deployments[[dir]] <- workloads
}
boxplot(unlist(deployments$`./raw-results/localhost`$workloada$read[2]), ylim=range(1,650))
